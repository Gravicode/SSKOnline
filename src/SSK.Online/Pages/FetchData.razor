@page "/fetchdata"

@using SSK.Online.Data
@inject WeatherForecastService ForecastService
@inject PredictionService PredictionService1
@using PKDSS.CoreLibrary.Model

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
    <div>
        @Status
        @((MarkupString)Data)
        @((MarkupString)Recommendation)

    </div>
    <select @bind="SelKomoditas">
        <option value="Padi">Padi</option>
        <option value="Jagung">Jagung</option>
        <option value="Kedelai">Kedelai</option>
   
    </select>
    <button class="btn btn-primary" @onclick="Predict">Call Service</button>
}

@code {
        WeatherForecast[] forecasts;
        string Data;
        string Status;
        string Recommendation;
        string SelKomoditas;
    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }

    async void Predict()
    {
        Status = "loading...";
        var Temp = "<table><tr><td>Unsur</td><td>Nilai</td></tr>";
        var result = await PredictionService1.InferenceWithApi();
        foreach (var item in result)
        {
            Temp += $"<tr><td>{item.Key}</td><td>{item.Value}</td></tr>";
        }
        Temp += "</table>";
        Data = Temp;
        Status = "";
        var input = new ModelOutput();
        input.Bray1_P2O5 = result["Bray1_P2O5"];
        input.Ca = result["Ca"];
        input.CLAY = result["CLAY"];
        input.C_N = result["C_N"];
        input.HCl25_K2O = result["HCl25_K2O"];
        input.HCl25_P2O5 = result["HCl25_P2O5"];
        input.Jumlah = result["Jumlah"];
        input.K = result["K"];
        input.KB_adjusted = result["KB_adjusted"];
        input.KJELDAHL_N = result["KJELDAHL_N"];
        input.KTK = result["KTK"];
        input.Mg = result["Mg"];
        input.Morgan_K2O = result["Morgan_K2O"];
        input.Na = result["Na"];
        input.Olsen_P2O5 = result["Olsen_P2O5"];
        input.PH_H2O = result["PH_H2O"];
        input.PH_KCL = result["PH_KCL"];
        input.RetensiP = result["RetensiP"];
        input.SAND = result["SAND"];
        input.SILT = result["SILT"];
        input.WBC = result["WBC"];
        var result2 = PredictionService1.GetFertilizerRecommendation(SelKomoditas, input);
        var temp2 = "";
        temp2 = "<table>";
        temp2 += $"<tr><td>KCL</td><td>{result2.KCL.ToString("n2")}</td></tr>";
        temp2 += $"<tr><td>SP36</td><td>{result2.SP36.ToString("n2")}</td></tr>";
        temp2 += $"<tr><td>Urea</td><td>{result2.Urea.ToString("n2")}</td></tr>";
        temp2 += $"<tr><td>NPK 15</td><td>{ (result2.NPK15 < 0 ? "-" : result2.NPK15.ToString("n2"))  }</td></tr>";
        temp2 += $"<tr><td>Uread 15</td><td>{ (result2.Urea15 < 0 ? "-" : result2.Urea15.ToString("n2")) }</td></tr>";
        temp2 += "<table>";
        Recommendation = temp2;
        StateHasChanged();

    }

}
